#!/usr/bin/env python3
import argparse
import re
import sys


def mini_grep(pattern, files, quiet_mode=False):
    try:
        for file in files:
            with open(file, 'r') as f:
                for line_number, line in enumerate(f, start=1):
                    if re.search(pattern, line):
                        if quiet_mode:
                            print(line.strip())
                        else:
                            print(f"{file}:{line_number}:{line.strip()}")
    except TypeError:
        for files in sys.stdin:
            mini_grep(regex, [files.strip()], quiet_mode)
    except FileNotFoundError:
        print('File provided does not exist')
        quit()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='mini-grep - A simple grep implementation in Python')

    parser.add_argument('-q',
                        action='store_true',
                        help='Only output matching lines, omitting line numbers')
    parser.add_argument('-e',
                        metavar='',
                        required=True,
                        help='Pattern to search for (regex)')
    parser.add_argument('files',
                        nargs='*',
                        default=[sys.stdin],
                        help='Files to search (default is stdin)')

    args = parser.parse_args()
    pattern = args.e
    files = args.files
    quiet_mode = args.q

    try:
        regex = re.compile(pattern)
    except re.error:
        print("Error: Invalid regex pattern")
        sys.exit(1)

    mini_grep(regex, files, quiet_mode)
